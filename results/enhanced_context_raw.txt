# Raw Context Provided to LLM

## Query
How do i create a scheduled task in Laravel, and what are the key features of its task scheduling system?

## Full Context (3106 characters)

[Relevance: 0.503] Running the Scheduler * Sub-Minute Scheduled Tasks * Running the Scheduler Locally * Task Output * Task Hooks * Events ## Introduction In the past, you may have written a cron configuration entry for each task you needed to schedule on your server. However, this can quickly become a pain because your task schedule is no longer in source control and you must SSH into your server to view your existing cron entries or add additional entries. Laravel's command scheduler offers a fresh approach to managing scheduled tasks on your server. The scheduler allows you to fluently and expressively define your command schedule within your Laravel application itself. When using the scheduler, only a single cron entry is needed on your server. Your task schedule is typically defined in your application's `routes/console.php` file. ## Defining Schedules You may define all of your scheduled tasks in your application's `routes/console.php` file. To get started, let's take a look at an example. In this example, we will schedule a closure to be called every day at midnight.

[Relevance: 0.464] nPingIf($condition, $url); Schedule::command('emails:send') ->daily() ->pingOnSuccessIf($condition, $successUrl) ->pingOnFailureIf($condition, $failureUrl); ## Events Laravel dispatches a variety of events during the scheduling process. You may define listeners for any of the following events: Event Name --- `Illuminate\Console\Events\ScheduledTaskStarting` `Illuminate\Console\Events\ScheduledTaskFinished` `Illuminate\Console\Events\ScheduledBackgroundTaskFinished` `Illuminate\Console\Events\ScheduledTaskSkipped` `Illuminate\Console\Events\ScheduledTaskFailed` ### On this page * Introduction * Defining Schedules * Scheduling Artisan Commands * Scheduling Queued Jobs * Scheduling Shell Commands * Schedule Frequency Options * Timezones * Preventing Task Overlaps * Running Tasks on One Server * Background Tasks * Maintenance Mode * Schedule Groups * Running the Scheduler * Sub-Minute Scheduled Tasks * Running the Scheduler Locally * Task Output * Task Hooks * Events Laravel is the most productive way to build, deploy, and monitor software.

[Relevance: 0.450] `withSchedule` method in your application's `bootstrap/app.php` file to define your scheduled tasks. This method accepts a closure that receives an instance of the scheduler: 1use Illuminate\Console\Scheduling\Schedule; 2 3->withSchedule(function (Schedule $schedule) { 4 $schedule->call(new DeleteRecentUsers)->daily(); 5}) use Illuminate\Console\Scheduling\Schedule; ->withSchedule(function (Schedule $schedule) { $schedule->call(new DeleteRecentUsers)->daily(); }) If you would like to view an overview of your scheduled tasks and the next time they are scheduled to run, you may use the `schedule:list` Artisan command: 1php artisan schedule:list php artisan schedule:list ### Scheduling Artisan Commands In addition to scheduling closures, you may also schedule Artisan commands and system commands. For example, you may use the `command` method to schedule an Artisan command using either the command's name or class.